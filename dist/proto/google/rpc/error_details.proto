// Code generated by furo-proto-gen. DO NOT EDIT.
syntax = "proto3";
package google.rpc;
option go_package = "google.golang.org/genproto/googleapis/rpc/errdetails;errdetails";
option java_multiple_files = true;
option java_outer_classname = "ErrorDetailsProto";
option java_package = "com.google.rpc";
option objc_class_prefix = "RPC";

import "google/protobuf/duration.proto";


// Describes violations in a client request. This error type focuses on the
//  syntactic aspects of the request.
message BadRequest {  

    // Describes all violations in a client request.
    repeated google.rpc.BadRequest.FieldViolation field_violations = 1;
}

// Describes additional debugging info.
message DebugInfo {  

    // The stack trace entries indicating where the error occurred.
    repeated string stack_entries = 1;

    // Additional debugging information provided by the server.
    string detail = 2;
}

// Describes the cause of the error with structured details.
// 
//  Example of an error when contacting the &#34;pubsub.googleapis.com&#34; API when it
//  is not enabled:
// 
//      { &#34;reason&#34;: &#34;API_DISABLED&#34;
//        &#34;domain&#34;: &#34;googleapis.com&#34;
//        &#34;metadata&#34;: {
//          &#34;resource&#34;: &#34;projects/123&#34;,
//          &#34;service&#34;: &#34;pubsub.googleapis.com&#34;
//        }
//      }
// 
//  This response indicates that the pubsub.googleapis.com API is not enabled.
// 
//  Example of an error that is returned when attempting to create a Spanner
//  instance in a region that is out of stock:
// 
//      { &#34;reason&#34;: &#34;STOCKOUT&#34;
//        &#34;domain&#34;: &#34;spanner.googleapis.com&#34;,
//        &#34;metadata&#34;: {
//          &#34;availableRegions&#34;: &#34;us-central1,us-east2&#34;
//        }
//      }
message ErrorInfo {  

    // The reason of the error. This is a constant value that identifies the
//  proximate cause of the error. Error reasons are unique within a particular
//  domain of errors. This should be at most 63 characters and match
//  /[A-Z0-9_]+/.
    string reason = 1;

    // The logical grouping to which the "reason" belongs. The error domain
//  is typically the registered service name of the tool or product that
//  generates the error. Example: "pubsub.googleapis.com". If the error is
//  generated by some common infrastructure, the error domain must be a
//  globally unique value that identifies the infrastructure. For Google API
//  infrastructure, the error domain is "googleapis.com".
    string domain = 2;

    // Additional structured details about this error.
// 
//  Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in
//  length. When identifying the current value of an exceeded limit, the units
//  should be contained in the key, not the value.  For example, rather than
//  {"instanceLimit": "100/request"}, should be returned as,
//  {"instanceLimitPerRequest": "100"}, if the client exceeds the number of
//  instances that can be created in a single (batch) request.
    map<string,string> metadata = 3;
}

// Provides links to documentation or for performing an out of band action.
// 
//  For example, if a quota check failed with an error indicating the calling
//  project hasn&#39;t enabled the accessed service, this can contain a URL pointing
//  directly to the right place in the developer console to flip the bit.
message Help {  

    // URL(s) pointing to additional information on handling the current error.
    repeated google.rpc.Help.Link links = 1;
}

// Provides a localized error message that is safe to return to the user
//  which can be attached to an RPC error.
message LocalizedMessage {  

    // The locale used following the specification defined at
//  http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
//  Examples are: "en-US", "fr-CH", "es-MX"
    string locale = 1;

    // The localized error message in the above locale.
    string message = 2;
}

// Describes what preconditions have failed.
// 
//  For example, if an RPC failed because it required the Terms of Service to be
//  acknowledged, it could list the terms of service violation in the
//  PreconditionFailure message.
message PreconditionFailure {  

    // Describes all precondition violations.
    repeated google.rpc.PreconditionFailure.Violation violations = 1;
}

// Describes how a quota check failed.
// 
//  For example if a daily limit was exceeded for the calling project,
//  a service could respond with a QuotaFailure detail containing the project
//  id and the description of the quota limit that was exceeded.  If the
//  calling project hasn&#39;t enabled the service in the developer console, then
//  a service could respond with the project id and set `service_disabled`
//  to true.
// 
//  Also see RetryInfo and Help types for other details about handling a
//  quota failure.
message QuotaFailure {  

    // Describes all quota violations.
    repeated google.rpc.QuotaFailure.Violation violations = 1;
}

// Contains metadata about the request that clients can attach when filing a bug
//  or providing other forms of feedback.
message RequestInfo {  

    // An opaque string that should only be interpreted by the service generating
//  it. For example, it can be used to identify requests in the service's logs.
    string request_id = 1;

    // Any data that was used to serve this request. For example, an encrypted
//  stack trace that can be sent back to the service provider for debugging.
    string serving_data = 2;
}

// Describes the resource that is being accessed.
message ResourceInfo {  

    // A name for the type of resource being accessed, e.g. "sql table",
//  "cloud storage bucket", "file", "Google calendar"; or the type URL
//  of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
    string resource_type = 1;

    // The name of the resource being accessed.  For example, a shared calendar
//  name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current
//  error is [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
    string resource_name = 2;

    // The owner of the resource (optional).
//  For example, "user:<owner email>" or "project:<Google developer project
//  id>".
    string owner = 3;

    // Describes what error is encountered when accessing this resource.
//  For example, updating a cloud project may require the `writer` permission
//  on the developer console project.
    string description = 4;
}

// Describes when the clients can retry a failed request. Clients could ignore
//  the recommendation here or retry when this information is missing from error
//  responses.
// 
//  It&#39;s always recommended that clients should use exponential backoff when
//  retrying.
// 
//  Clients should wait until `retry_delay` amount of time has passed since
//  receiving the error response before retrying.  If retrying requests also
//  fail, clients should use an exponential backoff scheme to gradually increase
//  the delay between retries based on `retry_delay`, until either a maximum
//  number of retries have been reached or a maximum retry delay cap has been
//  reached.
message RetryInfo {  

    // Clients should wait at least this long between retrying the same request.
    google.protobuf.Duration retry_delay = 1;
}