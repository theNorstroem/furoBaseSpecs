// Code generated by furo-proto-gen. DO NOT EDIT.
syntax = "proto3";
package google.api;
option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/api/annotations;annotations";
option java_multiple_files = true;
option java_outer_classname = "ResourceProto";
option java_package = "com.google.api";
option objc_class_prefix = "GAPI";

import "google/protobuf/descriptor.proto";


// A simple descriptor of a resource type.
// 
//  ResourceDescriptor annotates a resource message (either by means of a
//  protobuf annotation or use in the service config), and associates the
//  resource&#39;s schema, the resource type, and the pattern of the resource name.
// 
//  Example:
// 
//      message Topic {
//        // Indicates this message defines a resource schema.
//        // Declares the resource type in the format of {service}/{kind}.
//        // For Kubernetes resources, the format is {api group}/{kind}.
//        option (google.api.resource) = {
//          type: &#34;pubsub.googleapis.com/Topic&#34;
//          name_descriptor: {
//            pattern: &#34;projects/{project}/topics/{topic}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Project&#34;
//            parent_name_extractor: &#34;projects/{project}&#34;
//          }
//        };
//      }
// 
//  The ResourceDescriptor Yaml config will look like:
// 
//      resources:
//      - type: &#34;pubsub.googleapis.com/Topic&#34;
//        name_descriptor:
//          - pattern: &#34;projects/{project}/topics/{topic}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Project&#34;
//            parent_name_extractor: &#34;projects/{project}&#34;
// 
//  Sometimes, resources have multiple patterns, typically because they can
//  live under multiple parents.
// 
//  Example:
// 
//      message LogEntry {
//        option (google.api.resource) = {
//          type: &#34;logging.googleapis.com/LogEntry&#34;
//          name_descriptor: {
//            pattern: &#34;projects/{project}/logs/{log}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Project&#34;
//            parent_name_extractor: &#34;projects/{project}&#34;
//          }
//          name_descriptor: {
//            pattern: &#34;folders/{folder}/logs/{log}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Folder&#34;
//            parent_name_extractor: &#34;folders/{folder}&#34;
//          }
//          name_descriptor: {
//            pattern: &#34;organizations/{organization}/logs/{log}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Organization&#34;
//            parent_name_extractor: &#34;organizations/{organization}&#34;
//          }
//          name_descriptor: {
//            pattern: &#34;billingAccounts/{billing_account}/logs/{log}&#34;
//            parent_type: &#34;billing.googleapis.com/BillingAccount&#34;
//            parent_name_extractor: &#34;billingAccounts/{billing_account}&#34;
//          }
//        };
//      }
// 
//  The ResourceDescriptor Yaml config will look like:
// 
//      resources:
//      - type: &#39;logging.googleapis.com/LogEntry&#39;
//        name_descriptor:
//          - pattern: &#34;projects/{project}/logs/{log}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Project&#34;
//            parent_name_extractor: &#34;projects/{project}&#34;
//          - pattern: &#34;folders/{folder}/logs/{log}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Folder&#34;
//            parent_name_extractor: &#34;folders/{folder}&#34;
//          - pattern: &#34;organizations/{organization}/logs/{log}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Organization&#34;
//            parent_name_extractor: &#34;organizations/{organization}&#34;
//          - pattern: &#34;billingAccounts/{billing_account}/logs/{log}&#34;
//            parent_type: &#34;billing.googleapis.com/BillingAccount&#34;
//            parent_name_extractor: &#34;billingAccounts/{billing_account}&#34;
// 
//  For flexible resources, the resource name doesn&#39;t contain parent names, but
//  the resource itself has parents for policy evaluation.
// 
//  Example:
// 
//      message Shelf {
//        option (google.api.resource) = {
//          type: &#34;library.googleapis.com/Shelf&#34;
//          name_descriptor: {
//            pattern: &#34;shelves/{shelf}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Project&#34;
//          }
//          name_descriptor: {
//            pattern: &#34;shelves/{shelf}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Folder&#34;
//          }
//        };
//      }
// 
//  The ResourceDescriptor Yaml config will look like:
// 
//      resources:
//      - type: &#39;library.googleapis.com/Shelf&#39;
//        name_descriptor:
//          - pattern: &#34;shelves/{shelf}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Project&#34;
//          - pattern: &#34;shelves/{shelf}&#34;
//            parent_type: &#34;cloudresourcemanager.googleapis.com/Folder&#34;
message ResourceDescriptor {  

    // The resource type. It must be in the format of
//  {service_name}/{resource_type_kind}. The `resource_type_kind` must be
//  singular and must not include version numbers.
// 
//  Example: `storage.googleapis.com/Bucket`
// 
//  The value of the resource_type_kind must follow the regular expression
//  /[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and
//  should use PascalCase (UpperCamelCase). The maximum number of
//  characters allowed for the `resource_type_kind` is 100.
    string type = 1;

    // Optional. The relative resource name pattern associated with this resource
//  type. The DNS prefix of the full resource name shouldn't be specified here.
// 
//  The path pattern must follow the syntax, which aligns with HTTP binding
//  syntax:
// 
//      Template = Segment { "/" Segment } ;
//      Segment = LITERAL | Variable ;
//      Variable = "{" LITERAL "}" ;
// 
//  Examples:
// 
//      - "projects/{project}/topics/{topic}"
//      - "projects/{project}/knowledgeBases/{knowledge_base}"
// 
//  The components in braces correspond to the IDs for each resource in the
//  hierarchy. It is expected that, if multiple patterns are provided,
//  the same component name (e.g. "project") refers to IDs of the same
//  type of resource.
    repeated string pattern = 2;

    // Optional. The field on the resource that designates the resource name
//  field. If omitted, this is assumed to be "name".
    string name_field = 3;

    // Optional. The historical or future-looking state of the resource pattern.
// 
//  Example:
// 
//      // The InspectTemplate message originally only supported resource
//      // names with organization, and project was added later.
//      message InspectTemplate {
//        option (google.api.resource) = {
//          type: "dlp.googleapis.com/InspectTemplate"
//          pattern:
//          "organizations/{organization}/inspectTemplates/{inspect_template}"
//          pattern: "projects/{project}/inspectTemplates/{inspect_template}"
//          history: ORIGINALLY_SINGLE_PATTERN
//        };
//      }
    unknown history = 4;

    // The plural name used in the resource name and permission names, such as
//  'projects' for the resource name of 'projects/{project}' and the permission
//  name of 'cloudresourcemanager.googleapis.com/projects.get'. It is the same
//  concept of the `plural` field in k8s CRD spec
//  https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
// 
//  Note: The plural form is required even for singleton resources. See
//  https://aip.dev/156
    string plural = 5;

    // The same concept of the `singular` field in k8s CRD spec
//  https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
//  Such as "project" for the `resourcemanager.googleapis.com/Project` type.
    string singular = 6;

    // Style flag(s) for this resource.
//  These indicate that a resource is expected to conform to a given
//  style. See the specific style flags for additional information.
    repeated unknown style = 10;
}

// Defines a proto annotation that describes a string field that refers to
//  an API resource.
message ResourceReference {  

    // The resource type that the annotated field references.
// 
//  Example:
// 
//      message Subscription {
//        string topic = 2 [(google.api.resource_reference) = {
//          type: "pubsub.googleapis.com/Topic"
//        }];
//      }
// 
//  Occasionally, a field may reference an arbitrary resource. In this case,
//  APIs use the special value * in their resource reference.
// 
//  Example:
// 
//      message GetIamPolicyRequest {
//        string resource = 2 [(google.api.resource_reference) = {
//          type: "*"
//        }];
//      }
    string type = 1;

    // The resource type of a child collection that the annotated field
//  references. This is useful for annotating the `parent` field that
//  doesn't have a fixed resource type.
// 
//  Example:
// 
//      message ListLogEntriesRequest {
//        string parent = 1 [(google.api.resource_reference) = {
//          child_type: "logging.googleapis.com/LogEntry"
//        };
//      }
    string child_type = 2;
}