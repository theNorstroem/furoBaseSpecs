// Code generated by furo-proto-gen. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: furo/navigation/navigation.proto

package navigationpb

import (
	furo "github.com/theNorstroem/FuroBaseSpecs/dist/pb/furo"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is an example signature of a navigation node, which can be used for the components of @furo/navigation
type Navigationnode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the node, this field value must be unique
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// String representation of the node
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Secondary text of the node [optional]
	SecondaryText string `protobuf:"bytes,3,opt,name=secondary_text,json=secondaryText,proto3" json:"secondary_text,omitempty"`
	// icon of a node. When used in furo-tree it will be displayed as leading icon [optional]
	Icon string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	// Which panel (i.e. view, edit, display) opens the node type (which is defined in property link). The value of this field must correspond to your registry.
	Panel string `protobuf:"bytes,6,opt,name=panel,proto3" json:"panel,omitempty"`
	// key words of the node
	KeyWords string `protobuf:"bytes,7,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	// if node has error
	HasError bool `protobuf:"varint,8,opt,name=has_error,json=hasError,proto3" json:"has_error,omitempty"`
	// node is open or not
	Open bool `protobuf:"varint,9,opt,name=open,proto3" json:"open,omitempty"`
	// Deeplink information of this node
	Link *furo.Link `protobuf:"bytes,10,opt,name=link,proto3" json:"link,omitempty"`
	// This node is a group label
	IsGroupLabel bool `protobuf:"varint,11,opt,name=is_group_label,json=isGroupLabel,proto3" json:"is_group_label,omitempty"`
	// Children of this node
	Children []*Navigationnode `protobuf:"bytes,12,rep,name=children,proto3" json:"children,omitempty"`
	// Attribute flags e.g. important, negative, positive. Can be used for custom annotations for styling, logic,...
	Flags []string `protobuf:"bytes,13,rep,name=flags,proto3" json:"flags,omitempty"`
	// Optional payload
	Payload *anypb.Any `protobuf:"bytes,14,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Navigationnode) Reset() {
	*x = Navigationnode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_furo_navigation_navigation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Navigationnode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Navigationnode) ProtoMessage() {}

func (x *Navigationnode) ProtoReflect() protoreflect.Message {
	mi := &file_furo_navigation_navigation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Navigationnode.ProtoReflect.Descriptor instead.
func (*Navigationnode) Descriptor() ([]byte, []int) {
	return file_furo_navigation_navigation_proto_rawDescGZIP(), []int{0}
}

func (x *Navigationnode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Navigationnode) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Navigationnode) GetSecondaryText() string {
	if x != nil {
		return x.SecondaryText
	}
	return ""
}

func (x *Navigationnode) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Navigationnode) GetPanel() string {
	if x != nil {
		return x.Panel
	}
	return ""
}

func (x *Navigationnode) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *Navigationnode) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *Navigationnode) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Navigationnode) GetLink() *furo.Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Navigationnode) GetIsGroupLabel() bool {
	if x != nil {
		return x.IsGroupLabel
	}
	return false
}

func (x *Navigationnode) GetChildren() []*Navigationnode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Navigationnode) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Navigationnode) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

// A menu tree
type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the node, this field value must be unique
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// String representation of the tree
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Labels / flags for the value, something like unspecified, empty, confidential, absent,... Can be used for AI, UI, Business Logic,...
	Labels []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	// Attributes for a value, something like confidential-msg: you are not allowed to see this value
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The root of the tree
	Root *Navigationnode `protobuf:"bytes,5,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_furo_navigation_navigation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_furo_navigation_navigation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_furo_navigation_navigation_proto_rawDescGZIP(), []int{1}
}

func (x *Tree) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tree) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Tree) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Tree) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Tree) GetRoot() *Navigationnode {
	if x != nil {
		return x.Root
	}
	return nil
}

var File_furo_navigation_navigation_proto protoreflect.FileDescriptor

var file_furo_navigation_navigation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x66, 0x75, 0x72, 0x6f, 0x2f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x66, 0x75, 0x72, 0x6f, 0x2f, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xab, 0x03, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x75, 0x72, 0x6f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8c, 0x02,
	0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x77, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x66, 0x75, 0x72,
	0x6f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x69, 0x74,
	0x68, 0x2f, 0x66, 0x75, 0x72, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x75, 0x33, 0x33, 0x65,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x66, 0x75, 0x72, 0x6f, 0x2f, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_furo_navigation_navigation_proto_rawDescOnce sync.Once
	file_furo_navigation_navigation_proto_rawDescData = file_furo_navigation_navigation_proto_rawDesc
)

func file_furo_navigation_navigation_proto_rawDescGZIP() []byte {
	file_furo_navigation_navigation_proto_rawDescOnce.Do(func() {
		file_furo_navigation_navigation_proto_rawDescData = protoimpl.X.CompressGZIP(file_furo_navigation_navigation_proto_rawDescData)
	})
	return file_furo_navigation_navigation_proto_rawDescData
}

var file_furo_navigation_navigation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_furo_navigation_navigation_proto_goTypes = []interface{}{
	(*Navigationnode)(nil), // 0: furo.navigation.Navigationnode
	(*Tree)(nil),           // 1: furo.navigation.Tree
	nil,                    // 2: furo.navigation.Tree.AttributesEntry
	(*furo.Link)(nil),      // 3: furo.Link
	(*anypb.Any)(nil),      // 4: google.protobuf.Any
}
var file_furo_navigation_navigation_proto_depIdxs = []int32{
	3, // 0: furo.navigation.Navigationnode.link:type_name -> furo.Link
	0, // 1: furo.navigation.Navigationnode.children:type_name -> furo.navigation.Navigationnode
	4, // 2: furo.navigation.Navigationnode.payload:type_name -> google.protobuf.Any
	2, // 3: furo.navigation.Tree.attributes:type_name -> furo.navigation.Tree.AttributesEntry
	0, // 4: furo.navigation.Tree.root:type_name -> furo.navigation.Navigationnode
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_furo_navigation_navigation_proto_init() }
func file_furo_navigation_navigation_proto_init() {
	if File_furo_navigation_navigation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_furo_navigation_navigation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Navigationnode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_furo_navigation_navigation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_furo_navigation_navigation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_furo_navigation_navigation_proto_goTypes,
		DependencyIndexes: file_furo_navigation_navigation_proto_depIdxs,
		MessageInfos:      file_furo_navigation_navigation_proto_msgTypes,
	}.Build()
	File_furo_navigation_navigation_proto = out.File
	file_furo_navigation_navigation_proto_rawDesc = nil
	file_furo_navigation_navigation_proto_goTypes = nil
	file_furo_navigation_navigation_proto_depIdxs = nil
}
